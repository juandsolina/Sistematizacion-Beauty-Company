apiVersion: v1
kind: Namespace
metadata:
  name: susana-app

---
# Secret para la app (credenciales DB, JWT, etc.)
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: susana-app
type: Opaque
stringData:
  DB_HOST: mysql
  DB_USER: user
  DB_PASSWORD: pass123
  DB_NAME: tienda
  DB_PORT: "3306"
  JWT_SECRET: supersecreto
  JWT_EXPIRES_IN: 7d

---
# Secret para MySQL
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: susana-app
type: Opaque
stringData:
  MYSQL_ROOT_PASSWORD: root123
  MYSQL_USER: user
  MYSQL_PASSWORD: pass123
  MYSQL_DATABASE: tienda

---
# PVC para MySQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: susana-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# ConfigMap con init.sql
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-config
  namespace: susana-app
data:
  init.sql: |
    -- Crear base de datos
    CREATE DATABASE IF NOT EXISTS tienda;
    USE tienda;

    CREATE TABLE IF NOT EXISTS usuarios (
      id INT AUTO_INCREMENT PRIMARY KEY,
      nombre VARCHAR(100) NOT NULL,
      email VARCHAR(100) UNIQUE NOT NULL,
      password VARCHAR(255) NOT NULL,
      rol ENUM('admin','cliente') DEFAULT 'cliente',
      creado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS productos (
      id INT AUTO_INCREMENT PRIMARY KEY,
      nombre VARCHAR(150) NOT NULL,
      descripcion TEXT,
      precio DECIMAL(10,2) NOT NULL,
      stock INT DEFAULT 0,
      imagen VARCHAR(255),
      creado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

---
# Deployment de MySQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: susana-app
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8
          envFrom:
            - secretRef:
                name: mysql-secret
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-storage
              mountPath: /var/lib/mysql
            - name: initdb
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
        - name: initdb
          configMap:
            name: mysql-init-config

---
# Service MySQL
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: susana-app
spec:
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306

---
# Deployment de la app (Node.js / backend + frontend)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: susana-app
  namespace: susana-app
spec:
  selector:
    matchLabels:
      app: susana-app
  replicas: 1
  template:
    metadata:
      labels:
        app: susana-app
    spec:
      containers:
        - name: susana-app
          image: susana-app:latest
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: app-secret
          ports:
            - containerPort: 3000

---
# Service de la app
apiVersion: v1
kind: Service
metadata:
  name: susana-app
  namespace: susana-app
spec:
  selector:
    app: susana-app
  ports:
    - port: 3000
      targetPort: 3000
  type: ClusterIP

---
# Ingress para exponer la app
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: susana-app-ingress
  namespace: susana-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: susana.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: susana-app
                port:
                  number: 3000
