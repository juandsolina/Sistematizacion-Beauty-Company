services:
  db:
    image: mysql:8
    container_name: mysql-db
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: tienda
      MYSQL_USER: user
      MYSQL_PASSWORD: pass123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
    healthcheck:
      # --- INICIO DE LA CORRECCIÓN ---
      # Cambiamos el 'test' para que use el usuario de la aplicación ('user').
      # Esto soluciona la "race condition", forzando a Docker a esperar
      # a que el 'init.sql' termine antes de marcar el servicio como "healthy".
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "user", "-ppass123"]
      # --- FIN DE LA CORRECCIÓN ---
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 40s
    networks:
      - app-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: node-app
    depends_on:
      db:
        condition: service_healthy # <--- Ahora esto esperará al healthcheck correcto
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: db
      DB_USER: user
      DB_PASSWORD: pass123
      DB_NAME: tienda
      DB_PORT: 3306
      JWT_SECRET: supersecreto
      JWT_EXPIRES_IN: 7d
    ports:
      - "3000:3000"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 3000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  phpmyadmin:
    image: phpmyadmin:5-apache
    container_name: phpmyadmin
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: root123
      UPLOAD_LIMIT: 64M
    depends_on:
      db:
        condition: service_healthy # <--- Y esto también
    ports:
      - "8081:80"
    networks:
      - app-network
    restart: unless-stopped

volumes:
  mysql_data:

networks:
  app-network:
    driver: bridge